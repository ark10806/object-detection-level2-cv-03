2021-10-07 16:29:31,258 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.11 (default, Aug  3 2021, 15:09:35) [GCC 7.5.0]
CUDA available: True
GPU 0: Tesla V100-PCIE-32GB
CUDA_HOME: None
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.0a0
OpenCV: 4.5.3
MMCV: 1.3.14
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.0
MMDetection: 2.17.0+2b29e6f
------------------------------------------------------------

2021-10-07 16:29:34,939 - mmdet - INFO - Distributed training: False
2021-10-07 16:29:38,532 - mmdet - INFO - Config:
dataset_type = 'CocoDataset'
data_root = '/opt/ml/detection/dataset/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
size_min = 512
size_max = 992
multi_scale_list = [(512, 512), (544, 544), (576, 576), (608, 608), (640, 640),
                    (672, 672), (704, 704), (736, 736), (768, 768), (800, 800),
                    (832, 832), (864, 864), (896, 896), (928, 928), (960, 960),
                    (992, 992)]
multi_scale_list_light = (512, 512)
alb_transform = [
    dict(type='VerticalFlip', p=0.15),
    dict(type='HorizontalFlip', p=0.3),
    dict(
        type='OneOf',
        transforms=[
            dict(type='GaussNoise', p=1.0),
            dict(type='GaussianBlur', p=1.0),
            dict(type='Blur', p=1.0)
        ],
        p=0.1),
    dict(
        type='OneOf',
        transforms=[
            dict(type='RandomGamma', p=1.0),
            dict(type='HueSaturationValue', p=1.0),
            dict(type='ChannelDropout', p=1.0),
            dict(type='ChannelShuffle', p=1.0),
            dict(type='RGBShift', p=1.0)
        ],
        p=0.1),
    dict(
        type='OneOf',
        transforms=[
            dict(type='ShiftScaleRotate', p=1.0),
            dict(type='RandomRotate90', p=1.0)
        ],
        p=0.1)
]
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        type='Resize',
        img_scale=[(512, 512), (544, 544), (576, 576), (608, 608), (640, 640),
                   (672, 672), (704, 704), (736, 736), (768, 768), (800, 800),
                   (832, 832), (864, 864), (896, 896), (928, 928), (960, 960),
                   (992, 992)],
        multiscale_mode='value',
        keep_ratio=True),
    dict(
        type='Albu',
        transforms=[
            dict(type='VerticalFlip', p=0.15),
            dict(type='HorizontalFlip', p=0.3),
            dict(
                type='OneOf',
                transforms=[
                    dict(type='GaussNoise', p=1.0),
                    dict(type='GaussianBlur', p=1.0),
                    dict(type='Blur', p=1.0)
                ],
                p=0.1),
            dict(
                type='OneOf',
                transforms=[
                    dict(type='RandomGamma', p=1.0),
                    dict(type='HueSaturationValue', p=1.0),
                    dict(type='ChannelDropout', p=1.0),
                    dict(type='ChannelShuffle', p=1.0),
                    dict(type='RGBShift', p=1.0)
                ],
                p=0.1),
            dict(
                type='OneOf',
                transforms=[
                    dict(type='ShiftScaleRotate', p=1.0),
                    dict(type='RandomRotate90', p=1.0)
                ],
                p=0.1)
        ],
        bbox_params=dict(
            type='BboxParams',
            format='pascal_voc',
            label_fields=['gt_labels'],
            min_visibility=0.0,
            filter_lost_elements=True),
        keymap=dict(img='image', gt_bboxes='bboxes'),
        update_pad_shape=False,
        skip_img_without_anno=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(512, 512),
        flip=False,
        transforms=[
            dict(
                type='Resize',
                img_scale=(512, 512),
                multiscale_mode='value',
                keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
classes = ('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',
           'Styrofoam', 'Plastic bag', 'Battery', 'Clothing')
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=2,
    train=dict(
        type='CocoDataset',
        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),
        ann_file='/opt/ml/detection/dataset/train_v1.json',
        img_prefix='/opt/ml/detection/dataset/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='Resize',
                img_scale=[(512, 512), (544, 544), (576, 576), (608, 608),
                           (640, 640), (672, 672), (704, 704), (736, 736),
                           (768, 768), (800, 800), (832, 832), (864, 864),
                           (896, 896), (928, 928), (960, 960), (992, 992)],
                multiscale_mode='value',
                keep_ratio=True),
            dict(
                type='Albu',
                transforms=[
                    dict(type='VerticalFlip', p=0.15),
                    dict(type='HorizontalFlip', p=0.3),
                    dict(
                        type='OneOf',
                        transforms=[
                            dict(type='GaussNoise', p=1.0),
                            dict(type='GaussianBlur', p=1.0),
                            dict(type='Blur', p=1.0)
                        ],
                        p=0.1),
                    dict(
                        type='OneOf',
                        transforms=[
                            dict(type='RandomGamma', p=1.0),
                            dict(type='HueSaturationValue', p=1.0),
                            dict(type='ChannelDropout', p=1.0),
                            dict(type='ChannelShuffle', p=1.0),
                            dict(type='RGBShift', p=1.0)
                        ],
                        p=0.1),
                    dict(
                        type='OneOf',
                        transforms=[
                            dict(type='ShiftScaleRotate', p=1.0),
                            dict(type='RandomRotate90', p=1.0)
                        ],
                        p=0.1)
                ],
                bbox_params=dict(
                    type='BboxParams',
                    format='pascal_voc',
                    label_fields=['gt_labels'],
                    min_visibility=0.0,
                    filter_lost_elements=True),
                keymap=dict(img='image', gt_bboxes='bboxes'),
                update_pad_shape=False,
                skip_img_without_anno=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),
        ann_file='/opt/ml/detection/dataset/val_v1.json',
        img_prefix='/opt/ml/detection/dataset/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(512, 512),
                flip=False,
                transforms=[
                    dict(
                        type='Resize',
                        img_scale=(512, 512),
                        multiscale_mode='value',
                        keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),
        ann_file='/opt/ml/detection/dataset/val_v1.json',
        img_prefix='/opt/ml/detection/dataset/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(512, 512),
                flip=False,
                transforms=[
                    dict(
                        type='Resize',
                        img_scale=(512, 512),
                        multiscale_mode='value',
                        keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
lr = 5e-05
optimizer = dict(type='AdamW', lr=5e-05, weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=10, norm_type=2))
lr_config = dict(
    policy='CosineAnnealing',
    warmup='linear',
    warmup_iters=300,
    warmup_ratio=0.1,
    min_lr_ratio=7e-06)
total_epochs = 40
expr_name = 'swinL7_992'
dist_params = dict(backend='nccl')
checkpoint_config = dict(interval=1)
log_config = dict(
    interval=10,
    hooks=[
        dict(type='TextLoggerHook'),
        dict(
            type='WandbLoggerHook',
            init_kwargs=dict(
                project='P-stage2-detection-Augs', name='swinL7_992'))
    ])
custom_hooks = [dict(type='NumClassCheckHook')]
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
runner = dict(type='EpochBasedRunner', max_epochs=40)
work_dir = './work_dirs/swinL7_992'
gpu_ids = range(0, 1)
pretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_large_patch4_window7_224_22kto1k.pth'
model = dict(
    type='CascadeRCNN',
    backbone=dict(
        type='SwinTransformer',
        embed_dims=192,
        depths=[2, 2, 18, 2],
        num_heads=[6, 12, 24, 48],
        window_size=7,
        mlp_ratio=4,
        qkv_bias=True,
        qk_scale=None,
        drop_rate=0.0,
        attn_drop_rate=0.0,
        drop_path_rate=0.2,
        patch_norm=True,
        out_indices=(0, 1, 2, 3),
        with_cp=False,
        convert_weights=True,
        init_cfg=dict(
            type='Pretrained',
            checkpoint=
            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_large_patch4_window7_224_22kto1k.pth'
        )),
    neck=dict(
        type='FPN',
        in_channels=[192, 384, 768, 1536],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(
            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),
    roi_head=dict(
        type='CascadeRoIHead',
        num_stages=3,
        stage_loss_weights=[1, 0.5, 0.25],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.05, 0.05, 0.1, 0.1]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.033, 0.033, 0.067, 0.067]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))
        ]),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=0,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=2000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=[
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.5,
                    neg_iou_thr=0.5,
                    min_pos_iou=0.5,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.6,
                    min_pos_iou=0.6,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.7,
                    neg_iou_thr=0.7,
                    min_pos_iou=0.7,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.0,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100)))

/opt/conda/envs/psc/lib/python3.8/site-packages/mmdet/core/anchor/builder.py:16: UserWarning: ``build_anchor_generator`` would be deprecated soon, please use ``build_prior_generator`` 
  warnings.warn(
2021-10-07 16:29:40,621 - mmdet - INFO - Use load_from_http loader
2021-10-07 16:29:41,356 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2021-10-07 16:29:41,405 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2021-10-07 16:29:41,420 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-07 16:29:41,737 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-07 16:29:42,056 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-07 16:29:46,113 - mmdet - INFO - Start running, host: root@965f40750ba2, work_dir: /opt/ml/detection/object-detection-level2-cv-03/1Phase/mmdetection/work_dirs/swinL7_992
2021-10-07 16:29:46,113 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
after_run:
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
2021-10-07 16:29:46,113 - mmdet - INFO - workflow: [('train', 1)], max: 40 epochs
wandb: Currently logged in as: ark10806 (use `wandb login --relogin` to force relogin)
loading annotations into memory...
Done (t=0.06s)
creating index...
index created!
loading annotations into memory...
Done (t=0.02s)
creating index...
index created!
wandb: wandb version 0.12.4 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.12.2
wandb: Syncing run swinL7_992
wandb:  View project at https://wandb.ai/ark10806/P-stage2-detection-Augs
wandb:  View run at https://wandb.ai/ark10806/P-stage2-detection-Augs/runs/23d5oof1
wandb: Run data is saved locally in /opt/ml/detection/object-detection-level2-cv-03/1Phase/mmdetection/wandb/run-20211007_162946-23d5oof1
wandb: Run `wandb offline` to turn off syncing.

/opt/conda/envs/psc/lib/python3.8/site-packages/mmdet/core/anchor/anchor_generator.py:324: UserWarning: ``grid_anchors`` would be deprecated soon. Please use ``grid_priors`` 
  warnings.warn('``grid_anchors`` would be deprecated soon. '
/opt/conda/envs/psc/lib/python3.8/site-packages/mmdet/core/anchor/anchor_generator.py:360: UserWarning: ``single_level_grid_anchors`` would be deprecated soon. Please use ``single_level_grid_priors`` 
  warnings.warn(
2021-10-07 16:30:05,383 - mmdet - INFO - Epoch [1][10/1953]	lr: 6.350e-06, eta: 1 day, 3:28:15, time: 1.266, data_time: 0.223, memory: 18371, loss_rpn_cls: 0.6697, loss_rpn_bbox: 0.0821, s0.loss_cls: 1.3660, s0.acc: 62.9590, s0.loss_bbox: 0.0486, s1.loss_cls: 0.9304, s1.acc: 52.6465, s1.loss_bbox: 0.0236, s2.loss_cls: 0.0820, s2.acc: 91.0938, s2.loss_bbox: 0.0122, loss: 3.2144, grad_norm: 74.4272
2021-10-07 16:30:14,693 - mmdet - INFO - Epoch [1][20/1953]	lr: 7.850e-06, eta: 23:49:56, time: 0.931, data_time: 0.006, memory: 18371, loss_rpn_cls: 0.6217, loss_rpn_bbox: 0.0345, s0.loss_cls: 0.2064, s0.acc: 96.5820, s0.loss_bbox: 0.0836, s1.loss_cls: 0.0950, s1.acc: 96.2402, s1.loss_bbox: 0.0265, s2.loss_cls: 0.0225, s2.acc: 98.9355, s2.loss_bbox: 0.0071, loss: 1.0971, grad_norm: 6.6898
2021-10-07 16:30:23,427 - mmdet - INFO - Epoch [1][30/1953]	lr: 9.350e-06, eta: 22:12:05, time: 0.873, data_time: 0.005, memory: 18371, loss_rpn_cls: 0.5494, loss_rpn_bbox: 0.0295, s0.loss_cls: 0.0927, s0.acc: 98.7598, s0.loss_bbox: 0.0333, s1.loss_cls: 0.0334, s1.acc: 99.3359, s1.loss_bbox: 0.0099, s2.loss_cls: 0.0104, s2.acc: 99.5410, s2.loss_bbox: 0.0029, loss: 0.7617, grad_norm: 4.2464
2021-10-07 16:30:32,653 - mmdet - INFO - Epoch [1][40/1953]	lr: 1.085e-05, eta: 21:39:06, time: 0.923, data_time: 0.005, memory: 19051, loss_rpn_cls: 0.4870, loss_rpn_bbox: 0.0581, s0.loss_cls: 0.2842, s0.acc: 95.4102, s0.loss_bbox: 0.1444, s1.loss_cls: 0.1166, s1.acc: 97.7734, s1.loss_bbox: 0.0320, s2.loss_cls: 0.0285, s2.acc: 98.4180, s2.loss_bbox: 0.0094, loss: 1.1601, grad_norm: 9.4490
2021-10-07 16:30:43,845 - mmdet - INFO - Epoch [1][50/1953]	lr: 1.235e-05, eta: 22:10:23, time: 1.119, data_time: 0.006, memory: 19051, loss_rpn_cls: 0.4257, loss_rpn_bbox: 0.0566, s0.loss_cls: 0.3233, s0.acc: 94.1113, s0.loss_bbox: 0.1477, s1.loss_cls: 0.1402, s1.acc: 96.9434, s1.loss_bbox: 0.0463, s2.loss_cls: 0.0347, s2.acc: 97.9102, s2.loss_bbox: 0.0117, loss: 1.1860, grad_norm: 8.4602
2021-10-07 16:30:54,298 - mmdet - INFO - Epoch [1][60/1953]	lr: 1.385e-05, eta: 22:15:10, time: 1.045, data_time: 0.006, memory: 19051, loss_rpn_cls: 0.3372, loss_rpn_bbox: 0.0311, s0.loss_cls: 0.2430, s0.acc: 95.1367, s0.loss_bbox: 0.1295, s1.loss_cls: 0.0711, s1.acc: 97.7637, s1.loss_bbox: 0.0382, s2.loss_cls: 0.0199, s2.acc: 98.7402, s2.loss_bbox: 0.0086, loss: 0.8786, grad_norm: 7.2584
2021-10-07 16:31:04,239 - mmdet - INFO - Epoch [1][70/1953]	lr: 1.535e-05, eta: 22:09:02, time: 0.994, data_time: 0.006, memory: 19051, loss_rpn_cls: 0.2910, loss_rpn_bbox: 0.0543, s0.loss_cls: 0.2476, s0.acc: 94.1406, s0.loss_bbox: 0.1743, s1.loss_cls: 0.0716, s1.acc: 97.3828, s1.loss_bbox: 0.0458, s2.loss_cls: 0.0240, s2.acc: 98.4473, s2.loss_bbox: 0.0104, loss: 0.9189, grad_norm: 7.9413
2021-10-07 16:31:14,246 - mmdet - INFO - Epoch [1][80/1953]	lr: 1.685e-05, eta: 22:05:26, time: 1.001, data_time: 0.006, memory: 19051, loss_rpn_cls: 0.2280, loss_rpn_bbox: 0.0350, s0.loss_cls: 0.2597, s0.acc: 94.2188, s0.loss_bbox: 0.1589, s1.loss_cls: 0.0690, s1.acc: 97.6465, s1.loss_bbox: 0.0414, s2.loss_cls: 0.0217, s2.acc: 98.6719, s2.loss_bbox: 0.0091, loss: 0.8228, grad_norm: 7.1902
2021-10-07 16:31:24,963 - mmdet - INFO - Epoch [1][90/1953]	lr: 1.835e-05, eta: 22:12:53, time: 1.072, data_time: 0.006, memory: 19051, loss_rpn_cls: 0.1777, loss_rpn_bbox: 0.0283, s0.loss_cls: 0.2161, s0.acc: 95.3223, s0.loss_bbox: 0.1297, s1.loss_cls: 0.0612, s1.acc: 97.7832, s1.loss_bbox: 0.0383, s2.loss_cls: 0.0169, s2.acc: 98.9062, s2.loss_bbox: 0.0069, loss: 0.6751, grad_norm: 5.4993
2021-10-07 16:31:34,333 - mmdet - INFO - Epoch [1][100/1953]	lr: 1.985e-05, eta: 22:01:16, time: 0.937, data_time: 0.006, memory: 19051, loss_rpn_cls: 0.1694, loss_rpn_bbox: 0.0331, s0.loss_cls: 0.2885, s0.acc: 94.3652, s0.loss_bbox: 0.1558, s1.loss_cls: 0.0794, s1.acc: 97.4023, s1.loss_bbox: 0.0493, s2.loss_cls: 0.0239, s2.acc: 98.6133, s2.loss_bbox: 0.0074, loss: 0.8067, grad_norm: 6.7148
2021-10-07 16:31:43,581 - mmdet - INFO - Epoch [1][110/1953]	lr: 2.135e-05, eta: 21:50:19, time: 0.925, data_time: 0.006, memory: 19051, loss_rpn_cls: 0.1517, loss_rpn_bbox: 0.0382, s0.loss_cls: 0.2211, s0.acc: 96.1621, s0.loss_bbox: 0.1152, s1.loss_cls: 0.0513, s1.acc: 98.3594, s1.loss_bbox: 0.0309, s2.loss_cls: 0.0147, s2.acc: 99.1309, s2.loss_bbox: 0.0059, loss: 0.6291, grad_norm: 7.3442
2021-10-07 16:31:53,472 - mmdet - INFO - Epoch [1][120/1953]	lr: 2.285e-05, eta: 21:48:07, time: 0.989, data_time: 0.006, memory: 19051, loss_rpn_cls: 0.1198, loss_rpn_bbox: 0.0258, s0.loss_cls: 0.2749, s0.acc: 93.1250, s0.loss_bbox: 0.1520, s1.loss_cls: 0.0908, s1.acc: 95.8594, s1.loss_bbox: 0.0676, s2.loss_cls: 0.0274, s2.acc: 98.1445, s2.loss_bbox: 0.0169, loss: 0.7752, grad_norm: 7.7032
2021-10-07 16:32:03,336 - mmdet - INFO - Epoch [1][130/1953]	lr: 2.435e-05, eta: 21:45:58, time: 0.986, data_time: 0.006, memory: 19051, loss_rpn_cls: 0.2049, loss_rpn_bbox: 0.0475, s0.loss_cls: 0.2987, s0.acc: 93.7207, s0.loss_bbox: 0.1654, s1.loss_cls: 0.0907, s1.acc: 96.7480, s1.loss_bbox: 0.0553, s2.loss_cls: 0.0304, s2.acc: 98.0469, s2.loss_bbox: 0.0145, loss: 0.9076, grad_norm: 7.3011
2021-10-07 16:32:14,172 - mmdet - INFO - Epoch [1][140/1953]	lr: 2.585e-05, eta: 21:53:07, time: 1.084, data_time: 0.006, memory: 19051, loss_rpn_cls: 0.1099, loss_rpn_bbox: 0.0280, s0.loss_cls: 0.3029, s0.acc: 93.2715, s0.loss_bbox: 0.1759, s1.loss_cls: 0.0779, s1.acc: 97.1777, s1.loss_bbox: 0.0501, s2.loss_cls: 0.0225, s2.acc: 98.4570, s2.loss_bbox: 0.0120, loss: 0.7791, grad_norm: 7.2529
2021-10-07 16:32:24,646 - mmdet - INFO - Epoch [1][150/1953]	lr: 2.735e-05, eta: 21:56:09, time: 1.047, data_time: 0.006, memory: 19051, loss_rpn_cls: 0.1642, loss_rpn_bbox: 0.0393, s0.loss_cls: 0.3114, s0.acc: 92.5195, s0.loss_bbox: 0.1979, s1.loss_cls: 0.0984, s1.acc: 96.0352, s1.loss_bbox: 0.0721, s2.loss_cls: 0.0312, s2.acc: 97.9004, s2.loss_bbox: 0.0143, loss: 0.9288, grad_norm: 6.2306
2021-10-07 16:32:35,980 - mmdet - INFO - Epoch [1][160/1953]	lr: 2.885e-05, eta: 22:05:47, time: 1.133, data_time: 0.006, memory: 19051, loss_rpn_cls: 0.1210, loss_rpn_bbox: 0.0278, s0.loss_cls: 0.3063, s0.acc: 93.0566, s0.loss_bbox: 0.1721, s1.loss_cls: 0.1007, s1.acc: 95.8203, s1.loss_bbox: 0.0715, s2.loss_cls: 0.0328, s2.acc: 97.8613, s2.loss_bbox: 0.0158, loss: 0.8480, grad_norm: 5.7110
2021-10-07 16:32:44,738 - mmdet - INFO - Epoch [1][170/1953]	lr: 3.035e-05, eta: 21:54:33, time: 0.876, data_time: 0.006, memory: 19051, loss_rpn_cls: 0.1835, loss_rpn_bbox: 0.0587, s0.loss_cls: 0.4690, s0.acc: 89.3750, s0.loss_bbox: 0.2792, s1.loss_cls: 0.1324, s1.acc: 94.9707, s1.loss_bbox: 0.0919, s2.loss_cls: 0.0410, s2.acc: 97.3047, s2.loss_bbox: 0.0170, loss: 1.2726, grad_norm: 8.8160
2021-10-07 16:32:54,278 - mmdet - INFO - Epoch [1][180/1953]	lr: 3.185e-05, eta: 21:50:13, time: 0.954, data_time: 0.006, memory: 19051, loss_rpn_cls: 0.1155, loss_rpn_bbox: 0.0291, s0.loss_cls: 0.2830, s0.acc: 92.8027, s0.loss_bbox: 0.1750, s1.loss_cls: 0.0984, s1.acc: 96.1133, s1.loss_bbox: 0.0671, s2.loss_cls: 0.0280, s2.acc: 98.2129, s2.loss_bbox: 0.0127, loss: 0.8086, grad_norm: 5.8662
2021-10-07 16:33:05,576 - mmdet - INFO - Epoch [1][190/1953]	lr: 3.335e-05, eta: 21:58:19, time: 1.130, data_time: 0.006, memory: 19051, loss_rpn_cls: 0.1422, loss_rpn_bbox: 0.0462, s0.loss_cls: 0.3355, s0.acc: 91.4062, s0.loss_bbox: 0.2092, s1.loss_cls: 0.1141, s1.acc: 94.4043, s1.loss_bbox: 0.0898, s2.loss_cls: 0.0402, s2.acc: 96.7383, s2.loss_bbox: 0.0254, loss: 1.0026, grad_norm: 6.5376
2021-10-07 16:33:14,685 - mmdet - INFO - Epoch [1][200/1953]	lr: 3.485e-05, eta: 21:51:24, time: 0.911, data_time: 0.006, memory: 19051, loss_rpn_cls: 0.1752, loss_rpn_bbox: 0.0515, s0.loss_cls: 0.4104, s0.acc: 90.6055, s0.loss_bbox: 0.2382, s1.loss_cls: 0.1244, s1.acc: 94.9512, s1.loss_bbox: 0.0880, s2.loss_cls: 0.0382, s2.acc: 97.4316, s2.loss_bbox: 0.0198, loss: 1.1457, grad_norm: 9.0895
